""" A {{ cookiecutter.plugin_type }} plugin for Binary Ninja generated by cookiecutter-binary-ninja-plugin! """
{% if cookiecutter.plugin_type == 'helper' %}
from binaryninja import BackgroundTaskThread, BinaryView, log_info


def {{ cookiecutter.project_slug }}(bv: BinaryView, background_task: BackgroundTaskThread):
    # TODO: Implement the functionality here
    background_task.progress = "Did something!"
    bv.update_analysis_and_wait()


class {{ cookiecutter.__project_name_pascal_case }}InBackground(BackgroundTaskThread):
    def __init__(self, bv: BinaryView, msg: str):
        super().__init__(msg, can_cancel=True)
        self.bv = bv

    def run(self):
        {{ cookiecutter.project_slug }}(self.bv, self)
        log_info(f"{self.name!r} completed")
{% elif cookiecutter.plugin_type == 'binaryview' %}
from binaryninja import Architecture, BinaryView
from .{{cookiecutter.project_slug}}view import {{ cookiecutter.__project_name_pascal_case }}View

{{ cookiecutter.__project_name_pascal_case }}View.register()
{% elif cookiecutter.plugin_type == 'ui' %}
import binaryninja
from binaryninjaui import ViewType, ViewFrame


class {{ cookiecutter.__project_name_pascal_case }}ViewType(ViewType):
    def __init__(self):
        super({{ cookiecutter.__project_name_pascal_case }}ViewType, self).__init__("{{ cookiecutter.plugin_name }}", "{{ cookiecutter.description }}")

    def getPriority(self, data: binaryninja.BinaryView, filename: str):
        return 1

    def create(self, data: binaryninja.BinaryView, view_frame:ViewFrame):
        return {{ cookiecutter.__project_name_pascal_case }}View(data)
{% elif cookiecutter.plugin_type == 'architecture' %}
from typing import List, Optional, Tuple, get_args

from binaryninja.architecture import Architecture
from binaryninja.enums import InstructionTextTokenType
from binaryninja.function import InstructionInfo, InstructionTextToken, RegisterInfo
from binaryninja.lowlevelil import LowLevelILFunction

from .const import ADDRESS_SIZE, ARCH_NAME
from .instr import REGS, decode


class {{ cookiecutter.__project_name_pascal_case }}(Architecture):
    name = ARCH_NAME
    address_size = ADDRESS_SIZE
    max_instr_length = 8  # TODO

    regs = {r: RegisterInfo(r, size=4) for r in list(get_args(REGS))}
    stack_pointer = "sp"

    def __init__(self):
        super().__init__()

    def get_instruction_info(self, data: bytes, addr: int) -> Optional[InstructionInfo]:
        if r := decode(data, addr):
            return r[1]
        h = InstructionInfo(length=4)  # TODO
        return h

    def get_instruction_text(self, data: bytes, addr: int) -> Optional[Tuple[List["InstructionTextToken"], int]]:
        if r := decode(data, addr):
            return r[0], r[1].length
        return [InstructionTextToken(InstructionTextTokenType.TextToken, "unk")], 4  # TODO

    def get_instruction_low_level_il(self, data: bytes, addr: int, il: LowLevelILFunction) -> Optional[int]:
        if not (r := decode(data, addr)):
            return 4  # TODO
        if len(r) < 3 or r[2] is None:
            return r[1].length
        fn = r[2]
        fn_list = fn if isinstance(fn, list) else [fn]
        for f in fn_list:
            if (h := f(il)) is not None:
                il.append(h)
        return r[1].length
{% elif cookiecutter.plugin_type == 'core' %}
# TODO: Not implemented yet
{% endif %}